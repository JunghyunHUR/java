JAVA

JSP 지시어 : page, include, taglib

스크립팅 원소 : 선언, 표현, 스크립트랫<%%>,  EL

액션원소 : useBean, setProperty, getProperty, plugin, forward, include, param

default 객체 : 선언하지 않고 사용
	- jsp : page, config
	- 페이지 입출력 : request, response, out
	- 컨텍스트 관련 : session, application, pageContext
	- 에러 : exception

객체 스코프
				context
	  index.jsp	    웹 응용프로그램(application)
session 	 /           ＼
            /               ＼   session	pageContext
          /	   forword   ＼		out
sub1.jsp-----------------sub2.jsp	page
	session			config
				excetion
forword - request

1. pageScope
2. requestScope
3. 

default 객체
 * page : jsp 페이지 자신을 표현하기 위한 객체 (this)
 * config : 서블릿의 구성 정보에 접근
 (*) request : 클라이언트의 요청을 표현하기 위한 객체
 (*) response : 웹 브라우저에 응답 데이터를 전송하기 위한 객체
 * out : jsp 페이지의 출력 스트림을 위한 객체
 (*) session : 현재 사용자의 세션을 확인하기 위한 객체
 * application : 웹 응용프로그램을 표현하기 위한 객체
 * pageContext : 다른 default 객체들을 프로그램적으로 접근하기 위한 객체
 * exception : 에러 처리를 위한 객체

<%page
	language = "java"
	extends = "클래스 이름" //상속이 있다면
	import = "임포트리스트, 임포스리스트"
	session = "true" || "false" //기본 값은 true
	errorPage = "에러페이지url"
	isErrorPage = "true" || "false"
	contentType = "text/html;charset=UTF-8"
	pageEncoding="UTF-8"
%>


Action 태그 : jsp의 어떤 동작을 지시하는 태그
 - forward, include, param

쿠키? 
 -> 웹 브라우저에서 데이터 요청
 -> 서버는 알맞은 로직을 수행 후 브라우저에 응답
 -> 서버와 브라우저는 관계를 종료

 -> 이렇게 연결이 끝났을 때에서 특별한 정보는 지속적으로 유지해야 할 필요
 -> 이럴 때 사용하는 것이 쿠키

쿠키  --> 생성 : 서버
	저장 : 클라이언트

쿠키 클래스를 이용 -> setter이용 -> response addCookie

 * setMaxAge() - 유효기간 설정
 * setPath() - 유효디렉토리
 * setValue() - 쿠키의 값
 * setVersion() - 쿠키 버전

 * getMaxAge()
 * getName()
 * getValue()
 * getPath()
 * getVersion()


Session
 - 웹 브라우저와 관계를 유지하는 수단으로 쿠키를 보았다.
 - 세션도 쿠키와 마찬가지로 서버와 관계를 유지하는 수단.
 - 하지만 쿠키와 달리 서버상에 객체로 존재한다.
 - 즉, 서버에만 접근이 가능하여 보안에 좋고, 저장할수 있는 데이터에 한계가 없다.

setAttribute() : 세션의 데이터 저장

getAttribute()
getAttributeNames() - 세션에 있는 모든 데이터 이름
getId() - 자동으로 생성된 세션의 유니크한 아이디 이름
isNew() - 세션이 최초 생성되었는지 이전에 생성된 세션인지 확인
getMaxInaciveInterval() - 세션유효 시간
removeAttribute() - 특정 세션 제거
invaildate() - 세션의 모든 데이터 삭제


jsp 코딩
1. double num = Math.random();
 num이 0.95 보다 크면 "축하합니다. 당첨되었습니다." + 점수
 아니면 "실패입니다. 다시 도전하세요." + 점수
 링크 getRequstURI() 를 이용하여 다시 도전하기 링크

2. form.jsp 를 만들고 이름, 나이, 주소를 입력 받아 출력시키세요.
	단, form.jsp 파일 하나로 모두 해결.


















