JAVA


 * 어노테이션 (Annotation) 이란?
    - 프로그램에게 추가적인 정보를 제공해주는 메타데이터(metadata)

 * 어노테이션 용도
	- 컴파일러에게 코드 작성 문법 에러 체크하도록 정보 제공
		- @Override

	- 소프트웨어 개발 툴이 빌드나 배치 시 코드를 자동 생성하게 정보 제공
		- jar, war = xml 설정파일을 자동으로 생성하거나 배포를위해
			   jar, war 자동생성

	- 실행 시(런타임시) 특정 기능 실행하도록 정보 제공
		- 객체가 애플리케이션 내부에서 해야할 역할을 정의 :  서블릿, 컨트롤러 ···

 * 어노테이션 타입 정의와 적용
	- 어노테이션 타입 정의
		- 소스 파일 생성 : AnnotationName.java
		- 소스 파일 내용 : public @ interface AnnotationName{ }

	- 어노테이션 타입 적용
		- @AnnotationName

 * 기본 엘리먼트 value
	- 어노테이션의 엘리먼트 멤버 : 어노테이션을 코드에 적용할 때 
				   외부의 값을 입력 받을 수 있도록 하는 역할

	- public @interface AnnotationName{
		String value(); -- 기본 엘리먼트 선언
		int elementName() default 5;
	}

	- 어노테이션 적용할 때 엘리먼트 이름 생략 가능
		@AnnotationName("값");

	- 두 개 이상의 속성을 기술할 때에는 value = 값 형태로 기술
		@AnnotationName(value = "값", elementName = 3)

@Controller(name = "main")
public class MainController{ ··· }


@WebServlet("/main")
public class MainServlet{}

 * 어노테이션 적용 대상
	- 코드 상에서 어노테이션을 적용할 수 있는 대상

	- java.lang.annotation.ElementType 열거 상수로 정의


Type			클래스, 인터페이스, 열거 타입

ANNOTATION_TYPE 	어노테이션

FIELD			필드

CONSTRUCTOR		생성자

Method			메소드

LOCAL_VARIABLE		로컬 변수

Package			패키지





 * 어노테이션 유지 정책
	- 어노테이션 적용 코드가 유지되는 시점을 지정하는 것
	- java.lanf.annotation.RetentionPolicy 열거 상수로 정의

SOURCE	 - 소스상에서만 어노테이션 정보를 유지한다. 소스 코드를 분석할 때만
	   의미가 있으며 바이트 코드 파일에는 정보가 남지 않는다.

CLASS	 - 바이트 코드 파일까지 어노테이션 정보를 유지한다.
	   하지만 리플렉션을 이용해서 이노테이션 정보를 얻을 수는 없다.

RUNTIME	 - 바이트 코드 파일까지 어노테이션 정보를 유지한다.
	   리플렉션을 이용해서 런타임에 어노테이션 정보를 얻을 수 있다.

클래스를 이용할 때 어떤 어노테이션을 적용했는지 확인해서 그 클래스의 역할을 정의 한다.

	- 리플랙션(Reflection) : 런타임 클래스의 메타 정보를 얻는 기능
		- 클래스가 가지고 있는 필드, 생성자, 메소드, 어노테이션의 정보를 얻을 수 있다.
		- 런타임 시 어노테이션 정보를 얻으려면 유지 정책을 RUNTIME으로 설정.


@Target({ ElementType.TYPE, ElementType.FIELD, ElementType.METHOD});
@Retention(RetentionPolicy.RUNTIME)
public @interface AnnotationName {

}

@AnnotationName
public class MyClass{
	@AnnotationName
	private String field;

	public Myclass(){}

	@AnnotationName
	public void methodName(){}
}

 * 런타임시 어노테이션 정보 사용하기
	- 클래스에 적용된 어노테이션 정보 얻기
		- 클래스.class 의 어노테이션 정보를 얻는 메소드 이용

 * 필드, 생성자, 메소드에 적용된 어노테이션 정보 얻기
	- 다음 메소드를 이용해 java.lang.reflect 패키지의 Field, Constructor, Method




@Annotation
class MyCalss{}
MyClass.class


 * 런타임시 어노테이션 정보 사용하기
	- Field, Constructor, Method



1. 객체와 클래스에 대한 설명으로 틀린 것은 무엇입니까? ③
① 클래스는 객체를 생성하기 위한 설계도(청사진)와 같은 것이다.
② new 연산자로 클래스의 생성자를 호출함으로서 객체가 생성된다.
③ 하나의 클래스로 하나의 객체만 생성할 수 있다.
④ 객체는 클래스의 인스턴스이다.


2. 클래스의 구성 멤버가 아닌 것은 무엇입니까? ④
① 필드(field)
② 생성자(constructor)
③ 메소드(method)
④ 로컬 변수(local variable)


3. 필드, 생성자, 메소드에 대한 설명으로 틀린 것은 무엇입니까? ④
① 필드는 객체의 데이터를 저장한다.
② 생성자는 객체의 초기화를 담당한다.
③ 메소드는 객체의 동작 부분으로, 실행 코드를 가지고 있는 블록이다.
④ 클래스는 반드시 필드와 메소드를 가져야 한다.


4. 필드에 대한 설명으로 틀린 것은 무엇입니까? ③
① 필드는 메소드에서 사용할 수 있다.
② 인스턴스 필드 초기화는 생성자에서 할 수 있다.
③ 필드는 반드시 생성자 선언 전에 선언되어야 한다.
④ 필드는 초기값을 주지 않더라도 기본값으로 자동 초기화된다.


5. 생성자에 대한 설명으로 틀린 것은 무엇입니까? ①
① 객체를 생성하려면 생성자 호출이 반드시 필요한 것은 아니다.
② 생성자는 다른 생성자를 호출하기 위해 this()를 사용할 수 있다.
③ 생성자가 선언되지 않으면 컴파일러가 기본 생성자를 추가한다.
④ 외부에서 객체를 생성할 수 없도록 생성자에 private 접근 제한자를 붙일 수 있다.


6. 메소드에 대한 설명으로 틀린 것은 무엇입니까? ④
① 리턴값이 없는 메소드는 리턴 타입을 void 로 해야 한다.
② 리턴 타입이 있는 메소드는 리턴값을 지정하기 위해 반드시 return 문이 있어야
한다. 
③ 매개값의 수를 모를 경우 "..."를 이용해서 매개 변수를 선언할 수 있다.
④ 메소드의 이름은 중복해서 선언할 수 없다.



7. 메소드 오버로딩에 대한 설명으로 틀린 것은 무엇입니까? ②
① 동일한 이름의 메소드를 여러 개 선언하는 것을 말한다.
② 반드시 리턴 타입이 달라야 한다.
③ 매개 변수의 타입, 수, 순서를 다르게 선언해야한다.
④ 매개값의 타입 및 수에 따라 호출될 메소드가 선택된다.


8. 인스턴스 멤버와 정적 멤버애 대한 설명으로 틀린 것은 무엇입니까? ②
① 정적 멤버는 static 으로 선언된 필드와 메소드를 말한다.
② 인스턴스 필드는 생성자 및 정적 블록에서 초기화될 수 있다.
③ 정적 필드와 정적 메소드는 객체 생성 없이 클래스를 통해 접근할 수 있다.
④ 인스턴스 필드와 메소드는 객체를 생성하고 사용해야 한다.


9. final 필드와 상수(static final)에 대한 설명으로 틀린 것은 무엇입니까? ②
① final 필드와 상수는 초기값이 저장되면 값을 변경할 수 없다.
② final 필드와 상수는 생성자에서 초기화될 수 있다.
③ 상수의 이름은 대문자로 작성하는 것이 관례이다.
④ 상수는 객체 생성 없이 클래스를 통해 사용할 수 있다.


10. 패키지에 대한 설명으로 틀린 것은 무엇입니까? ④
① 패키지는 클래스들을 그룹화시키는 기능을 한다.
② 클래스가 패키지에 소속되려면 패키지 선언을 반드시 해야 한다.
③ import 문은 다른 패키지의 클래스를 사용할 때 필요하다.
④ mycompany 패키지에 소속된 클래스는 yourcompany 에 옮겨 놓아도 동작한다.


11. 접근 제한에 대한 설명으로 틀린 것은 무엇입니까? ③
① 접근 제한자는 클래스, 필드, 생성자, 메소드의 사용을 제한한다.
② public 접근 제한은 아무런 제한 없이 해당 요소를 사용할 수 있게 한다.
③ default 접근 제한은 해당 클래스 내부에서만 사용을 허가한다.
④ 외부에서 접근하지 못하도록 하려면 private 접근 제한을 해야 한다.

12. 다음 클래스에서 해당 멤버가 필드, 생성자, 메소드 중 어떤 것인지 빈칸을 채우세요.

public class Member {
 private String name; --------------------------------( #1 : 필드 )

 public Member(String name) { ... } ----------------( #2 : 생성자 )

 public void setName(String name) { ... } ----------( #3 : 메소드 )
} 

13. 현실 세계의 회원을 Member 클래스로 모델링하려고 합니다. 회원의 데이터로는
이름, 아이디, 패스워드, 나이가 있습니다. 이 데이터들을 가지는 Member 클래스를
선언해보세요. 

데이터이름 	필드 이름 	타입
이름 		name 		문자열
아이디 		id 		문자열
패스워드 		password 	문자열
나이 		age 		정수

[Member.java]

public class Member {

	String name;
	String id;
	String password;
	int age;

} 

14. 위에서 작성한 Member 클래스에 생성자를 추가하려고 합니다. 다음과 같이
Member 객체를 생성할 때 name 필드와 id 필드를 외부에서 받은 값으로 초기화하려면
생성자를 어떻게 선언해야합니까?

Member user1 = new Member("홍길동", "hong");
Member user2 = new Member("강자바", "java");

public class Member {
 
	String name;
	String id;
	public Member(String name, String id){
		this.name = name;
		this.id = id;
	}
}

15. MemberService 클래스에 login( )메소드와 logout( ) 메소드를 선언하려고 합니다. login( )
메소드를 호출할 때에는 매개값으로 id 와 password 를 제공하고, logout( ) 메소드는 id 만
매개값으로 제공합니다. MemberService 클래스와 login( ), logout( ) 메소드를 선언해보세요.

1) login( ) 메소드는 매개값 id 가 "hong", 매개값 password 가 "12345"일 경우에만 true 로
리턴하고 그 이외의 값일 경우에는 false 를 리턴하도록 하세요.

2) logout( ) 메소드의 내용은 "로그아웃 되었습니다." 가 출력되도록 하세요

리턴 타입 	메소드 이름 	매개 변수(타입)
boolean		login		id(String), password(String)
void		logout		id(String)
[MemberService.java]

	public class MemberService {
	 
		String id = "hong";
		String password = "12345";
	
		public boolean login(String id, String password){
			if(this.id == id && this.password == password){
				return true;
			}else {
				return false;
			}
		}
	
		public void logout(String id) {
			if(this.id == id){
				System.out.println("로그아웃 되었습니다.");
			}
		}

	}
	[MemberServiceExample.java]
	public class MemberServiceExample {
		public static void main(String[] args) {
		MemberService memberService = new MemberService( );
		boolean result = memberService.login("hong", "12345");
		if(result){
			System.out.println("로그인 되었습니다.");
			memberService.logout("hong");
		} else {
			System.out.println("id 또는 password 가 올바르지 않습니다.");
		}
	}
} 


16. PrinterExample 클래스에서 Printer 객체를 생성하고 pritln( ) 메소드를 호출해서
매개값을 콘솔에 출력하려고 합니다. println( ) 메소드의 매개값으로는 int, boolean, 
double, String 값을 줄 수 있습니다. Printer 클래스에서 println( ) 메소드를 선언해보세요.

public class Printer{
 // 작성위치
}

public class PrinterExample{
	public static void main(String[] args){
	Printer. printer = new Printer();
	printer.println(10);
	printer.println(true);
	printer.println(5.7);
	printer.println("홍길동");
	} 
}

17. 16 번 문제에서는 Printer 객체를 생성하고 println( ) 메소드를 생성했습니다. Printer 
객체를 생성하지 않고 PrinterExample 클래스에서 다음과 같이 호출하려면 Printer 
클래스를 어떻게 수정하면 될까요?


 
18. ShopService 객체를 싱글톤으로 만들고 싶습니다. ShopServiceExample 클래스에서
ShopService 의 getInstance( )메소드로 싱글톤을 얻을 수 있도록 ShopService 클래스를
작성해보세요.

public class ShopService{
 // 작성 위치
}

public class ShopServiceExample{
	public static void main(String[] args){
		ShopService obj1 = ShopService.getInstance();
		ShopService obj2 = ShopService.getInstance();
		if(obj1 == obj2){
		System.out.println("같은 ShopService 객체 입니다.");
		} else {
		System.out.println("다른 ShopService 객체 입니다.");
		} 
	} 
}


19.은행 계좌 객채엔 Account 객체는 잔고(balance) 필드를 가지고
있습니다. balance 필드는 음수값이 될 수 없고, 최대 백만
원까지만 저장할 수 있습니다. 외부에서 balance 필드를 마음대로
변경하지 못하도록 하고, 0 <= balance <= 1,000,000 범위의 값만
가질 수 있도록 Account 클래스를 작성해보세요. 
1) Setter 와 Getter 를 이용하세요. 
2) 0 과 1,000,000 은 MIN_BALANCE 와 MAX_BALANCE 상수를
선언해서 이용하세요. 
3) Setter 의 매개값이 음수이거나 백만 원을 초과하면 현재
balance 값을 유지하세요.


20. 계좌정보를 입력 받아서, 계좌를 관리하는 프로그램 BankApplication

1. 계좌생성 2. 계좌목록 3. 예금 4. 출금 5. 종료

선택> 1
계좌생성
계좌번호 : 111-111
계좌주 : 홍길동
초기입금액 : 10000
결과 : 계좌가 생성 되었습니다








싱글톤 - 여러개의 개체를 만들지 못하도록 막는다.

public 싱글톤{
	private static 싱글톤 singleton = new 싱글톤();
	private 싱글톤(){}
	static 싱글톤 getinstance(){
		return singleton;
	}
}





