Java

열거타입(Enumeration Type)
 - 한정된 값만을 갖는 데이터 타입

열거타입 선언
 - 파일 이름과 동일한 이름으로 다음과 같이 선언(첫 글자를 대문자)
  public enum 열거타입이름{.......}
 - 한정된 값인 열거 상수 정의
	- 열거 상수 이름은 관례적으로 모두 대문자로 작성
	- 다른 단어가 결합된 이름일 경우 관례적으로 밑줄(_)로 연결



1. 객체 지향 프로그래밍
2. 객체(Object)와 클래스(Class)
3. 클래스 선언
4. 객체 생성과 클래스 변수
5. 클래스의 구성 멤버
6. 필드(Field)
7. 생성자
8. 메소드
9. 인스턴스 멤버와 this
10. 정적 멤버와 상수
12. 패키지



1. 객체 지향 프로그래밍
 * 객체 지향 프로그래밍
  - OOP : Object Orientied Programming
  - 부품 객체를 먼저 만들고 이것들을 하나씩 조립해 완성된 프로그램을 만드는 기법

 * 객체 (Object) 란?
  - 물리적으로 존재하는 것 ( 자동차, 책, 사람 )
  - 추상적인 것(회사, 날짜 등) 중에서 자신의 속성과 동작을 가지는 모든 것
  - 객체는 필드(속성)와 메소드(동작)로 구성된 자바 객체로 모델링 가능

 * 객체 상호작용

 * 객체간의 관계
  - 객체 지향 프로그램에서는 객체는 다른 객체와 관계를 맺음

  - 관계의 종류
	집합 관계 - 완성품과 
	사용 관계 - 객체가 다른 객체를 사용하는 관계
	상속 관계 - 종류 객체와 구체적인 사물 객체 관계

 * 객체 지향 프로그래밍의 특징
  - 캡슐화
	1. 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것
	2. 외부 객체는 객체 내부 구조를 알지 못하며 객체가 노출해 제공하는 필드와
	    메소드만 이용 가능
	3. 필드와 메소드를 캡슐화하여 보호하는 이유는 외부의 잘못된 사용으로 인해 객체가 
	    손상되지 않도록
	4. 자바 언어는 캡슐화된 멤버를 노출시킬 것인지 숨길 것인지 결정하기 위해 
	    접근 제한자(Access Modifier) 사용
  - 상속
	1. 상위(부모) 객체의 필드와 메소드를 하위(자식) 객체에게 물려주는 행위
	2. 하위 객체는 상위객체를 확장해서 추가적인 필드와 메소드를 가질 수 있음
	3. 상속 대상 : 필드와 메소드
	4. 상속의 효과
	   - 상위 객체를 재사용해서 하위 객체를 빨리 개발 가능
	   - 반복된 코드의 중복을 줄임
	   - 유지 보수의 편리성 제공
	   - 객체의 다형성 구현
  - 다형성
	1. 같은 타입이지만 실행 결과가 다양한 객체를 대입할 수 있는 성질
		- 부모 타입에는 모든 자식 객체가 대입
		- 인터페이스 타입에는 모든 구현 객체가 대입
	2. 효과
		- 객체를 부품화시키는 것 가능
		- 유지보수가 용이

 * 객체(Object)와 클래스(Class)

현실세계 : 	설계도 -> 객체
자바 :		클래스 -> 객체
클래스에는 객체를 생성하기 위한 필드와 메소드가 정의

 * 클래스의 이름
  - 자바 식별자 작성 규칙에 따라야
  - 한글 이름도 가능하나, 영어 이름으로 작성
  - 알파벳 대소문자는 서로 다른 문자로 인식
  - 첫 글자와 연결된 다른 단어의 첫 글자는 대문자로 작성하는 것이 관례

new 연산자
 객체 생성 역할
 클래스()는 생성자를 호출하는 코드

클래스 변수
  new 연산자에 의해 리턴 된 객체의 번지 저장(참조 타입 변수)
  힙 영역의 객체를 사용하기 위해 사용

클래스의 용도
  라이브러리(API : Application Program Interface) 용





























