Java

1. 데이터 타입 분류
2. 메모리 사용 영역
3. 참조 타입 변수의 ==, != 연산
4. null과 NullPotinterException
5. 
6.
7.


2. 메모리 사용 영역
JVM이 사용하는 메모리 영역 (램)
  * OS에서 할당 받은 메모리 영역(Runtime Data Area)을 세 영역으로 구분
	-1. 메소드 영역
	-2. hip 영역
	-3. 스택 영역

JVM이 사용하는 메모리 영역

 * 메소드 영역
	JVM 시작할 때 생성
	로딩된 클래스 바이트 코드 내용을 분석 후 저장
	 모든 스레드가 공유

 * Hip 영역
	JVM 시작할 때 생성
	객체/배열 저장
	사용되지 않는 객체는 Garbage Collector가 자동 제거

 * JVM 스택
	스레드 별 생성
	메소드 호출할 때마다 Frame을 스택에 추가(push)
	메소드를 종료하면 Frame 제거(pop)


1. java 파일 이름
	- 메소드, hip 영역이 생성됨
2. JVM이 구동
3. 파일이름.class 로딩
4. main 메소드를 실행하면 JVM 스택에Frame이 생성됨.


	public static void main(String[], args){
		int num = 10;
		if(num = 10){
			int num2 = 20;
			int num3 = 72;
		}
	}

main Frame - num = 10; 저장

3. 참조 변수의 ==, != 연산
변수의 값이 같은지 다른지 비교
- 기본 타입 : byte, char, short, int, long, float, double, boolean
	의미 : 변수의 값이 같은지 다른지 조사

- 참조타입 : 배열, 열거, 클래스, 인터페이스
	의미 : 동일한 객체를 참조하는지 다른 객체를 참조하는지 조사


4. null과 NullPointerException
 null (널)
- 변수가 참조하는 객체가 없을 경우 초기값으로 사용 가능
- 참조 타입의 변수에만 저장가능
- null로 초기화된 참조 변수는 스택 영역 생성

NullPointerException의 의미
 - 예외(Exception)
	-사용자의 잘못된 조작 이나 잘못된 코딩으로 인해 발생하는 프로그램 오류

 - NullPointerException
	- 참조 변수가 null 값을 가지고 있을 때
	  - 객체의 필드나 메소드를 사용하려고 했을 때 발생


String 타입
 - 문자열을 저장하는 클래스 타입

 문자열 리터럴이 동일하다면 String 객체 공유

 new 연산자를 이용한 String 객체 생성
	힙 영역에 새로운 String 객체 생성
	String 객체를 생성한 후 번지 리턴

배열 선언
 - 배열을 사용하기 위해 우선 배열 변수 선언
 데이터 타입 [] 변수 = {값1, 값2, 값3......};
	        변수[] = new 타입[]{값1, 값2....};






















