JAVA

1. 상속 개념
2. 클래스 상속(extends)
3. 부모 생성자 호출(super(...))
4. 메소드 재정의(Override)
5. final 클래스와 final 메소드
6. protexted 접근 제한자
7. 타입변환과 다형성(polymorphism)
8. 추상 클래스(Abstract Class)


1. 상속(Inheritance)이란?
 - 부모가 자식에서 물려주는 행위
 - 부모가 자식을선택해서 물려줌

 * 객체 지향 프로그램:
	자식(하위, 파생) 클래스가 부모(상위) 클래스의 멤버를 물려받는것
	자식이 부모를 선택해 물려받음
	상속 대상 : 부모의 필드와 메소드(생성자는 물려받지 못함)

 * 상속(Inheritance) 개념의 활용
	- 상속의 효과
		- 부모 클래스 재사용해 자식 클래스 빨리 개발 가능
		- 반복된 코드 중복 줄임
		- 유지 보수 편리성 제공
		- 객체 다형성 구현 가능

	- 상속 대상 제한
		- 부모 클래스의 private 접근 갖는 필드와 메소드 제외
		- 부모 클래스가 다른 패키지에 있을 경우 default 접근 갖는 필드와
		  메소드도 제외

 * extends 키워드
	- 자식 클래스가 상속항 부모 클래스를 지정하는 키워드
	- 자바는 단일 상속 - 부모 클래스 나열 불가

 * 자식 객체 생성하면 부모 객체도 생성되는가?
 - 부모 없는 자식 없음
	- 자식 객체 생성할 때는 부모 객체부터 생성 후 자식 객체 생성
	- 부모 생성자 호출 완료 후 자식 생성자 호출 완료

 * 명시적인 부모 생성자 호출
  - 부모 객체 생성할 때, 부모 생성자 선택해 호출
	- super(매개값, ...)
		- 매개값과 동일한 타입, 개수, 순서 맞는 부모 생성자 호출
  - 부모 생성자 없다면 컴파일 오류 발생
  - 반드시 자식 생성자의 첫 줄에 위치
  - 부모 클래스에 기본(매개변수 없는) 생성자가 없다면 필수 작성

4. 메소드 재정의(Override)
 * 메소드 재정의(@Override)
   - 부모 클래스의 메소드와 동일한 시그니쳐를 가져야 한다.
   - 접근 제한을 더 강하게 오버라이딩 불가
	- public을 default나 private 으로 수정 불가
	- 반대로 default 는 public 으로 수정 가능
   - 새로운 예외(Exception) throws 불가

 * @Override 어노테이션
  - 컴파일러에게 부모 클래스의 메소드 선언부와 동일한지 검사 지시
  - 정확한 메소드 재정의 위에 붙여주면 OK

 * 메소드 재정의 효과
  - 부모 메소드는 숨겨지는 효과 발생
	- 재정의된 자식 메소드 실행
 * 부모 메소그의 사용(super)
  - 메소드의 재정의는 부모 메소드를 숨기는 효과
	- 자식 클래스에서는 재정의된 메소드만 호출
  - 자식 클래스에서 수정되기 전 부모 메소드 호출 - super 사용
	- super는 부모 객체 참조(참고: this는 자신 객체 참조)



















































