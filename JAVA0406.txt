JAVA

필드의 다형성
 - 다형성을 구현하는 기술정 방법

강제 타입 변환(Casting)
 - 부모 타입을 자식 타입으로 변환하는 것

조건 
 - 자식 타입을 부모 타입으로 자동 변환 후, 다시 자식 타입으로 변환할 때

강제 타입 변환이 필요한 경우
 - 자식 타입이 부모 타입으로 자동 변환
	- 부모 타입에 선언된 필드와 메소드만 사용 가능

 - 자식 타입에 선언된 필드와 메소드를 다시 사용해야 할 경우

객체 타입 확인(instanceof)
 - 부모 타입이면 모두 자식 타입으로 강제 타입 변환할 수 있는 것 아님
	- ClassCastException 예외 발생 가능

 - 먼저 자식 타입인지 확인 후 강제 타입 실행해야 함
boolean result = 객체 instanceof 자식타입클래스

추상 클래스 개념
 * 추상(abstract)
   - 실체들 간에 공통되는 특성을 추출한 것
	- 예1 : 새, 곤충, 물고기 > 동물(추상)
	- 예2 : 삼성, 현대, LG > 회사(추상)

 * 추상 클래스(abstract class)
  - 실체 클래스들의 공통되는 필드와 메소드 정의한 클래스
  - 추상 클래스는 실체 클래스의 부모 클래스 역할(단독 객체x)

 * 추상 클래스의 용도
  - 실체 클래스의 공통된 필드와 메소드의 이름을 통일할 목적
	- 실체 클래스 설계자가 여러 사람일 경우
	- 실체 클래스마다 필드와 메소드가 제각기 다른 이름을 가질 수 있음

  - 실체 클래스를 작성할 때 시간 절약
	- 실체 클래스는 추가적인 필드와 메소드만 선언

  - 실체 클래스 설계 규격을 만들고자 할 때
	- 실체클래스가 가져야 할 필드와 메소드를 추상 클래스에 미리 정의
	- 실페 클래스는 추상 클래스를 무조건 상속 받아 작성

 * 추상 클래스의 선언
  - 클래스의 선언에 abstract 키워드 사용
	- new 연산자로

 * 추상 메소드와 오버라이딩(재정의)
  - 메소드 이름 동일하지만, 실행 내용이 실체 클래스마다 다른 메소드
  - 예 : 동물은 소리를 낸다, 하지만 실체 동물들의 소리는 제각기 다르다.

 * 구현 방법
  - 추상 클래스에는 메소드의 선언부만 작성(추상 메소드)
  - 실체 클래스에서 메소드의 실행 내용 작성(오버라이딩(Overriding))

자식 class 는 부모 class 를 선택 할 수 있지만 부모 class 는 자식 class 를 선택 할 수 없다.

자바 15버전 부터
 -- public sealed class 부모 class permits 자식1, 자식2{

}
















